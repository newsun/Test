<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/jdbc
            http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- scans the classpath for annotated components (including @Repostory 
		and @Service that will be auto-registered as Spring beans -->
	<context:component-scan base-package="com.symbio.sbtm" />

	<!-- methods or classes needing to run in a complete transaction will be 
		annotated with Transactional -->
	<tx:annotation-driven />

	<!-- datastore configuration file -->
	<!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="location" value="/META-INF/jdbc.properties" /> </bean> -->

	<!-- Creates a data source that can provide a connection to in-memory embedded 
		database populated with test data see: http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/ch12s08.html -->
	<!-- <jdbc:embedded-database id="dataSource"> <jdbc:script location="classpath:hsql_schema.sql" 
		/> <jdbc:script location="classpath:hsql_test_data.sql" /> </jdbc:embedded-database> -->
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName"> <value>${jdbc.driverClassName}</value> 
		</property> <property name="url"> <value>${jdbc.url}</value> </property> 
		<property name="username"> <value>${jdbc.username}</value> </property> <property 
		name="password"> <value>${jdbc.password}</value> </property> </bean> -->
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> 
		<property name="driverClassName"> <value>${jdbc.driverClassName}</value> 
		</property> <property name="url"> <value>${jdbc.url}</value> </property> 
		<property name="username"> <value>${jdbc.username}</value> </property> <property 
		name="password"> <value>${jdbc.password}</value> </property> <property name="maxActive"> 
		<value>80</value> </property> <property name="maxIdle"> <value>20</value> 
		</property> <property name="maxWait"> <value>3000</value> </property> </bean> -->
	<!--bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource" 
		destroy-method="close"> <property name="driver"><value>${jdbc.driverClassName}</value></property> 
		<property name="driverUrl"><value>${jdbc.url}</value></property> <property 
		name="user"><value>${jdbc.username}</value></property> <property name="password"><value>${jdbc.password}</value></property> 
		<property name="alias"><value>test</value></property> <property name="houseKeepingSleepTime"><value>90000</value></property> 
		<property name="prototypeCount"><value>10</value></property> <property name="maximumConnectionCount"><value>100</value></property> 
		<property name="minimumConnectionCount"><value>10</value></property> <property 
		name="trace"><value>true</value></property> <property name="verbose"><value>true</value></property> 
		</bean> -->

	<!-- This will ensure that hibernate or jpa exceptions are automatically 
		translated into Spring's generic DataAccessException hierarchy for those 
		classes annotated with Repository For example see PersonDaoJpa -->
	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- JPA Entity Manager Factory -->
	<!-- <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" 
		p:dataSource-ref="dataSource" p:persistenceXmlLocation="META-INF/persistence.xml" 
		p:persistenceUnitName="springJpaPersistenceUnit" /> -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		p:persistenceXmlLocation="classpath*:META-INF/persistence.xml"
		p:persistenceUnitName="springJpaPersistenceUnit" />

	<!-- bean post-processor for JPA annotations -->
	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<!-- Transaction Config -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
		p:entityManagerFactory-ref="entityManagerFactory" />

	<!-- use declarative transaction management -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- Example of SAF2 action instantiated by Spring -->

	<import resource="spring_conf/beans.xml" />

</beans>

